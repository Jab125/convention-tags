import dev.jab125.remapping.Purifier
import dev.jab125.remapping.Remapper
import dev.jab125.remapping.Setup
import dev.jab125.remapping.SourceRemap

import java.nio.file.Files
import java.nio.file.StandardCopyOption

plugins {
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT'
    id "maven-publish"
}

archivesBaseName = "convention-tags"
version "1.0.1"

Setup.setup();
minecraft {
    version("1.20.6")
    platform(org.spongepowered.gradle.vanilla.repository.MinecraftPlatform.JOINED)
    runs {
        server()
        client()
    }
}

sourceSets {
    main {
        java {
            srcDirs += ["src/main/generated/java"]
        }
    }
}

java {
    withSourcesJar()
}

def commonJar = sourcesJar.archiveFile.get().getAsFile().toPath().resolveSibling(archivesBaseName + "-common-" + version + ".jar");
def fabricJar = sourcesJar.archiveFile.get().getAsFile().toPath().resolveSibling(archivesBaseName + "-fabric-" + version + ".jar");
def nfJar = sourcesJar.archiveFile.get().getAsFile().toPath().resolveSibling(archivesBaseName + "-neoforge-" + version + ".jar");
def ij = task("intermediaryJar") {
    doFirst {
        def deps = configurations.compileClasspath
        def resolve = deps.resolve().stream().map { it.toPath() }.toArray(java.nio.file.Path[]::new);
        Remapper.run(jar.archiveFile.get().getAsFile().toPath(), fabricJar, resolve)
    }
} dependsOn jar

def commonSourcesJar = sourcesJar.archiveFile.get().getAsFile().toPath().resolveSibling(archivesBaseName + "-common-" + version + "-sources.jar");
def fabricSourcesJar = sourcesJar.archiveFile.get().getAsFile().toPath().resolveSibling(archivesBaseName + "-fabric-" + version + "-sources.jar");
def nfSourcesJar = sourcesJar.archiveFile.get().getAsFile().toPath().resolveSibling(archivesBaseName + "-neoforge-" + version + "-sources.jar");
def isj = task("intermediarySourcesJar") {
    doFirst {

        def resolve = configurations.compileClasspath.resolve().stream().toArray(java.io.File[]::new);
        def create = SourceRemap.create(resolve, 21)
        create.remapSourcesJar(sourcesJar.archiveFile.get().getAsFile().toPath(), fabricSourcesJar)
    }
} dependsOn sourcesJar
def purify = task("purify") {
    doFirst {
        Files.copy(jar.archiveFile.get().getAsFile().toPath(), nfJar, StandardCopyOption.REPLACE_EXISTING);
        Files.copy(sourcesJar.archiveFile.get().getAsFile().toPath(), nfSourcesJar, StandardCopyOption.REPLACE_EXISTING);

        Files.copy(jar.archiveFile.get().getAsFile().toPath(), commonJar, StandardCopyOption.REPLACE_EXISTING);
        Files.copy(sourcesJar.archiveFile.get().getAsFile().toPath(), commonSourcesJar, StandardCopyOption.REPLACE_EXISTING);

        Purifier.purify(fabricJar, "META-INF/neoforge.mods.toml")
        Purifier.purify(fabricSourcesJar, "META-INF/neoforge.mods.toml")
        Purifier.purify(nfJar, "/fabric.mod.json")
        Purifier.purify(nfSourcesJar, "/fabric.mod.json")
        Purifier.purify(commonJar, "META-INF/neoforge.mods.toml")
        Purifier.purify(commonSourcesJar, "META-INF/neoforge.mods.toml")
        Purifier.purify(commonJar, "/fabric.mod.json")
        Purifier.purify(commonSourcesJar, "/fabric.mod.json")
    }
}
build {
    dependsOn ij, isj
    finalizedBy purify
}

purify.mustRunAfter(jar, sourcesJar, ij, isj)

publishing {
    publications {
        mavenCommon(MavenPublication) {
            groupId = 'dev.jab125'
            artifactId = "convention-tags-common"
            version = project.version
            artifact file(commonJar.toFile())
            artifact (file(commonSourcesJar.toFile())) {
                classifier "sources"
            }
        }

        mavenFabric(MavenPublication) {
            groupId = 'dev.jab125'
            artifactId = "convention-tags-fabric"
            version = project.version
            artifact file(fabricJar.toFile())
            artifact (file(fabricSourcesJar.toFile())) {
                classifier "sources"
            }
        }

        mavenNeoForge(MavenPublication) {
            groupId = 'dev.jab125'
            artifactId = "convention-tags-neoforge"
            version = project.version
            artifact file(nfJar.toFile())
            artifact (file(nfSourcesJar.toFile())) {
                classifier "sources"
            }
        }
        setupRepositories(repositories)
    }
}


void setupRepositories(RepositoryHandler repositories) {
    //repositories.mavenLocal() // uncomment for testing
    def ENV = System.getenv()
    if (ENV.MAVEN_URL) {
        repositories.maven {
            url ENV.MAVEN_URL
            if (ENV.MAVEN_USERNAME) {
                credentials {
                    username ENV.MAVEN_USERNAME
                    password ENV.MAVEN_PASSWORD
                }
            }
        }
    }
}

publish.dependsOn(build)
publishToMavenLocal.dependsOn(build)